@using SatRadioProxy.SiriusXM
@{
    Layout = null;
}

<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>SatRadioProxy</title>
    <style type="text/css">
        body {
            background-color: black;
            color: white;
            font-family: sans-serif;
            font-size: 16pt;
            text-align: center;
        }

        audio {
            width: 400px;
            max-width: calc(100vw - 50px);
            visibility: hidden;
        }

        a {
            color: inherit;
        }

        button, input, select {
            font-size: inherit;
        }

        table {
            border-collapse: collapse;
            margin: auto;
            text-align: center;
        }

        td, th {
            padding: 0.5em;
        }

        input[type=checkbox] {
            width: 20px;
            height: 20px;
        }
    </style>
</head>
<body>
    <audio controls></audio>
    <hr />
    @{
        var address = NetworkInterfaceProvider.address;
        var port = NetworkInterfaceProvider.port;
        var channels = await SiriusXMChannelCache.getChannelsAsync(CancellationToken.None);
    }
    <table style="">
        <tbody>
            @foreach (var channel in channels)
            {
                <tr>
                    <td style="text-align: right">
                        @channel.channelNumber
                    </td>
                    <td style="text-align: left">
                        <a href="http://@(address):@(port)/Proxy/playlist-@(channel.channelId).m3u8" class="button play">
                            @channel.name
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <hr />
    <div>
        <a href="http://@(address):9000">
            Lyrion Music Server
        </a>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/hls.js/1.5.18/hls.min.js"
            integrity="sha512-hARxLWym80kd0Bzl5/93OuW1ujaKfvmJ90yTKak/RB67JuNIjtErU2H7H3bteyfzMuqiSK0tXarT7eK6lEWBBA=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"></script>
    <script type="text/javascript">
        (async () => {
            try {
                if (Hls.isSupported()) {
                    const audio = document.getElementsByTagName("audio")[0];

                    const hls = new Hls({ startPosition: 0 });

                    const pr = new Promise(r => hls.on(Hls.Events.MEDIA_ATTACHED, r));
                    hls.attachMedia(audio);
                    await pr;

                    const play = async (url) => {
                        audio.pause();

                        hls.loadSource(url);

                        await new Promise(r => hls.on(Hls.Events.MANIFEST_PARSED, r));

                        audio.style.visibility = "visible";
                        audio.play();
                    };

                    for (const playButton of document.querySelectorAll(".button.play")) {
                        playButton.addEventListener("click", e => {
                            e.preventDefault();
                            play(e.target.href);
                        })
                    }

                    hls.on(Hls.Events.ERROR, function (event, data) {
                        console.warn(event, data);
                    });
                }
            } catch (e) {
                console.error(e);
            }
        })();
    </script>
</body>
</html>
